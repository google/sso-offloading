# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Unified Release

on:
  push:
    tags:
      - 'v*.*.*' 
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write   
      packages: write 

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Extract SDK version from tag
        id: extract_sdk_version
        run: |
          VERSION_TAG="${{ github.ref_name }}"
          # This shell command removes the "v" prefix (e.g., v1.2.0 -> 1.2.0)
          VERSION=${VERSION_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Extract Extension version from file
        id: extract_ext_version
        run: |
          # Reads version from the extension's package.json for independent versioning
          EXT_VERSION=$(jq -r .version packages/extension/package.json)
          echo "version=$EXT_VERSION" >> $GITHUB_OUTPUT

      # --- Build All Components ---
      - name: Build SSO Extension
        run: pnpm run build:extension

      - name: Build SSO Offloading Connector
        run: pnpm --filter sso-offloading-connector run build
        
      # --- IWA and Chrome App Steps ---
      - name: Get all tags (for IWA manifest)
        uses: octokit/request-action@v2.x
        id: get_all_tags
        with:
          route: GET /repos/${{ github.repository }}/git/matching-refs/tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create iwa-update-manifest.json
        run: pnpm run gen-iwa-update-manifest
        env:
          TAG: ${{ github.ref_name }}
          VERSION: ${{ steps.extract_sdk_version.outputs.version }}
          ALL_TAGS_JSON: ${{ steps.get_all_tags.outputs.data }}

      - name: Build IWA example
        id: build_iwa_example
        run: pnpm run build:iwa
        env:
          KEY: ${{ secrets.IWA_KEY }}
          KEY_PASSPHRASE: ${{ secrets.IWA_KEY_PASSPHRASE }}

      - name: Build Chrome App example
        run: pnpm run build:chrome-app
        
      # --- Package All Components ---
      - name: Install Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Package SSO Offloading Extension
        id: package_sso_extension
        uses: ./.github/actions/pack-crx
        with:
          key: ${{ secrets.SSO_EXTENSION_KEY }}
          input-dir: packages/extension/dist
          name: sso-offloading-extension

      - name: Package Chrome App
        id: package_chrome_app
        uses: ./.github/actions/pack-crx
        with:
          key: ${{ secrets.CHROME_APP_KEY }}
          input-dir: examples/chrome-app-example/chrome-app
          name: chrome-app
          
      # --- Generate All Manifests ---
      - name: Generate Extension update-manifest.xml
        id: generate_extension_manifest
        uses: ./.github/actions/generate-update-manifest-xml
        with:
          app-id: ${{ steps.package_sso_extension.outputs.crx-id }}
          app-version: ${{ steps.extract_ext_version.outputs.version }} 
          crx-filename: 'sso-offloading-extension.crx'
          repository: ${{ github.repository }}
          github-tag: ${{ github.ref_name }}

      - name: Write Extension update-manifest.xml
        run: echo "${{ steps.generate_extension_manifest.outputs.xml-content }}" > extension-update-manifest.xml

      - name: Generate Chrome App update-manifest.xml
        id: generate_app_manifest
        uses: ./.github/actions/generate-update-manifest-xml
        with:
          app-id: ${{ steps.package_chrome_app.outputs.crx-id }}
          app-version: ${{ steps.extract_sdk_version.outputs.version }} 
          crx-filename: 'chrome-app.crx'
          repository: ${{ github.repository }}
          github-tag: ${{ github.ref_name }}

      - name: Write Chrome App update-manifest.xml
        run: echo "${{ steps.generate_app_manifest.outputs.xml-content }}" > chrome-app-update-manifest.xml

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Release Components & Versions

            * **SSO Offloading Connector (SDK):** `v${{ steps.extract_sdk_version.outputs.version }}`
            * **SSO Offloading Extension:** `v${{ steps.extract_ext_version.outputs.version }}`
            * **IWA Example:** `v${{ steps.extract_sdk_version.outputs.version }}`
            * **Chrome App Example:** `v${{ steps.extract_sdk_version.outputs.version }}`
          artifacts: |
            ${{ steps.package_sso_extension.outputs.crx-name }}
            ./extension-update-manifest.xml
            examples/simple-iwa-example/dist/simple-iwa-example.swbn
            ${{ steps.package_chrome_app.outputs.crx-name }}
            ./iwa-update-manifest.json
            ./chrome-app-update-manifest.xml